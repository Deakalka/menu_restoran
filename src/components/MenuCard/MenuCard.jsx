import { useState, memo } from 'react';
import PropTypes from 'prop-types';
import { useCart } from '../../context/CartContext';
import styles from './MenuCard.module.css';

const MenuCard = ({ dish, onClick }) => {
  const [isFavorite, setIsFavorite] = useState(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å—Ç—Ä–∞–≤–∞ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    return favorites.includes(dish.id);
  });
  
  const { addItemToCart } = useCart();
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
  const handleToggleFavorite = (e) => {
    e.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—é onClick –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    let newFavorites;
    
    if (isFavorite) {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
      newFavorites = favorites.filter(id => id !== dish.id);
    } else {
      // –î–æ–¥–∞—î–º–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö
      newFavorites = [...favorites, dish.id];
    }
    
    localStorage.setItem('favorites', JSON.stringify(newFavorites));
    setIsFavorite(!isFavorite);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –¥–∏—Å–ø–∞—Ç—á–∏–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –ø–æ–¥—ñ—é, —â–æ–± —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ Favorites –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const event = new CustomEvent('favoritesUpdated', { 
      detail: { favorites: newFavorites }
    });
    document.dispatchEvent(event);
  };
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞
  const handleAddToCart = (e) => {
    e.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—é onClick –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    addItemToCart(dish);
  };
  
  return (
    <div className={styles.cardContainer} onClick={onClick}>
      <div className={styles.card}>
        <div className={styles.imageContainer}>
          <img 
            src={dish.image || 'https://via.placeholder.com/300x200?text=–ù–µ–º–∞—î+–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'} 
            alt={dish.name} 
            className={styles.image} 
          />
        </div>
        
        <div className={styles.info}>
          <h3 className={styles.title}>{dish.name}</h3>
          
          <div className={styles.price}>
            <span>{dish.price} –≥—Ä–Ω</span>
            <button 
              className={styles.addToCart}
              onClick={handleAddToCart}
              aria-label="–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞"
            >
              +
            </button>
          </div>
          
          <p className={styles.description}>
            {dish.description.length > 100 
              ? `${dish.description.substring(0, 100)}...` 
              : dish.description
            }
          </p>
          
          <div className={styles.tags}>
            {dish.isVegetarian && (
              <span className={`${styles.tag} ${styles.vegetarian}`}>–í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–µ</span>
            )}
            {dish.spiciness > 0 && (
              <span className={`${styles.tag} ${styles.spicy}`}>
                {'üå∂Ô∏è'.repeat(dish.spiciness)}
              </span>
            )}
            {dish.isAlcoholic && (
              <span className={`${styles.tag} ${styles.alcoholic}`}>18+</span>
            )}
          </div>
        </div>
        
        <button 
          className={`${styles.favoriteBtn} ${isFavorite ? styles.active : ''}`}
          onClick={handleToggleFavorite}
          aria-label={isFavorite ? '–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö' : '–î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö'}
        >
          {isFavorite ? '‚òÖ' : '‚òÜ'}
        </button>
      </div>
    </div>
  );
};

MenuCard.propTypes = {
  dish: PropTypes.shape({
    id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired,
    price: PropTypes.number.isRequired,
    description: PropTypes.string,
    image: PropTypes.string,
    isVegetarian: PropTypes.bool,
    spiciness: PropTypes.number,
    isAlcoholic: PropTypes.bool,
  }).isRequired,
  onClick: PropTypes.func.isRequired,
};

export default memo(MenuCard);



